{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\LENOVO\\.conda\\envs\\deeplearning\\lib\\site-packages\\tensorflow\\python\\framework\\dtypes.py:516: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint8 = np.dtype([(\"qint8\", np.int8, 1)])\n",
      "C:\\Users\\LENOVO\\.conda\\envs\\deeplearning\\lib\\site-packages\\tensorflow\\python\\framework\\dtypes.py:517: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint8 = np.dtype([(\"quint8\", np.uint8, 1)])\n",
      "C:\\Users\\LENOVO\\.conda\\envs\\deeplearning\\lib\\site-packages\\tensorflow\\python\\framework\\dtypes.py:518: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint16 = np.dtype([(\"qint16\", np.int16, 1)])\n",
      "C:\\Users\\LENOVO\\.conda\\envs\\deeplearning\\lib\\site-packages\\tensorflow\\python\\framework\\dtypes.py:519: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint16 = np.dtype([(\"quint16\", np.uint16, 1)])\n",
      "C:\\Users\\LENOVO\\.conda\\envs\\deeplearning\\lib\\site-packages\\tensorflow\\python\\framework\\dtypes.py:520: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint32 = np.dtype([(\"qint32\", np.int32, 1)])\n",
      "C:\\Users\\LENOVO\\.conda\\envs\\deeplearning\\lib\\site-packages\\tensorflow\\python\\framework\\dtypes.py:525: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  np_resource = np.dtype([(\"resource\", np.ubyte, 1)])\n",
      "C:\\Users\\LENOVO\\.conda\\envs\\deeplearning\\lib\\site-packages\\tensorboard\\compat\\tensorflow_stub\\dtypes.py:541: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint8 = np.dtype([(\"qint8\", np.int8, 1)])\n",
      "C:\\Users\\LENOVO\\.conda\\envs\\deeplearning\\lib\\site-packages\\tensorboard\\compat\\tensorflow_stub\\dtypes.py:542: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint8 = np.dtype([(\"quint8\", np.uint8, 1)])\n",
      "C:\\Users\\LENOVO\\.conda\\envs\\deeplearning\\lib\\site-packages\\tensorboard\\compat\\tensorflow_stub\\dtypes.py:543: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint16 = np.dtype([(\"qint16\", np.int16, 1)])\n",
      "C:\\Users\\LENOVO\\.conda\\envs\\deeplearning\\lib\\site-packages\\tensorboard\\compat\\tensorflow_stub\\dtypes.py:544: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint16 = np.dtype([(\"quint16\", np.uint16, 1)])\n",
      "C:\\Users\\LENOVO\\.conda\\envs\\deeplearning\\lib\\site-packages\\tensorboard\\compat\\tensorflow_stub\\dtypes.py:545: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint32 = np.dtype([(\"qint32\", np.int32, 1)])\n",
      "C:\\Users\\LENOVO\\.conda\\envs\\deeplearning\\lib\\site-packages\\tensorboard\\compat\\tensorflow_stub\\dtypes.py:550: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  np_resource = np.dtype([(\"resource\", np.ubyte, 1)])\n",
      "Using TensorFlow backend.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.2.4\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "import keras as ks\n",
    "print(ks.__version__)\n",
    "from keras.layers import Convolution2D\n",
    "from keras.layers import MaxPooling2D\n",
    "from keras.layers import Flatten\n",
    "from keras.layers import Dense\n",
    "from keras.models import Sequential"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#network parameter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From C:\\Users\\LENOVO\\.conda\\envs\\deeplearning\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py:74: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.\n",
      "\n",
      "WARNING:tensorflow:From C:\\Users\\LENOVO\\.conda\\envs\\deeplearning\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py:517: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead.\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\LENOVO\\.conda\\envs\\deeplearning\\lib\\site-packages\\ipykernel_launcher.py:2: UserWarning: Update your `Conv2D` call to the Keras 2 API: `Conv2D(32, (3, 3), input_shape=(64, 64, 3..., activation=\"relu\")`\n",
      "  \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From C:\\Users\\LENOVO\\.conda\\envs\\deeplearning\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py:4138: The name tf.random_uniform is deprecated. Please use tf.random.uniform instead.\n",
      "\n",
      "WARNING:tensorflow:From C:\\Users\\LENOVO\\.conda\\envs\\deeplearning\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py:3976: The name tf.nn.max_pool is deprecated. Please use tf.nn.max_pool2d instead.\n",
      "\n",
      "WARNING:tensorflow:From C:\\Users\\LENOVO\\.conda\\envs\\deeplearning\\lib\\site-packages\\keras\\optimizers.py:790: The name tf.train.Optimizer is deprecated. Please use tf.compat.v1.train.Optimizer instead.\n",
      "\n",
      "WARNING:tensorflow:From C:\\Users\\LENOVO\\.conda\\envs\\deeplearning\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py:3295: The name tf.log is deprecated. Please use tf.math.log instead.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "classifier = Sequential()\n",
    "classifier.add(Convolution2D(32,3,3,input_shape=(64,64,3),activation='relu'))\n",
    "classifier.add(MaxPooling2D(pool_size=(2,2)))\n",
    "classifier.add(Flatten())\n",
    "classifier.add(Dense(units = 128, activation = 'relu'))\n",
    "classifier.add(Dense(units = 14, activation = 'softmax'))\n",
    "classifier.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#Data augmentation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 420 images belonging to 14 classes.\n",
      "Found 154 images belonging to 14 classes.\n"
     ]
    }
   ],
   "source": [
    "from keras.preprocessing.image import ImageDataGenerator\n",
    "train_datagen = ImageDataGenerator(rescale = 1./255,\n",
    "                                   shear_range = 0.2,\n",
    "                                   zoom_range = 0.2,\n",
    "                                   horizontal_flip = True)\n",
    "test_datagen = ImageDataGenerator(rescale = 1./255)\n",
    "#training set\n",
    "training_set = train_datagen.flow_from_directory('dataset/train_set',\n",
    "                                                 target_size = (64, 64),\n",
    "                                                 batch_size = 32,\n",
    "                                                 class_mode = 'categorical')\n",
    "test_set = test_datagen.flow_from_directory('dataset/test1_set',\n",
    "                                            target_size = (64, 64),\n",
    "                                            batch_size = 32,\n",
    "                                            class_mode = 'categorical')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "12/12 [==============================] - 3s 221ms/step - loss: 1.1445 - acc: 0.6568 - val_loss: 1.1089 - val_acc: 0.6104\n",
      "Epoch 2/30\n",
      "12/12 [==============================] - 3s 217ms/step - loss: 1.1540 - acc: 0.6089 - val_loss: 1.1663 - val_acc: 0.6006\n",
      "Epoch 3/30\n",
      "12/12 [==============================] - 2s 186ms/step - loss: 1.0866 - acc: 0.6568 - val_loss: 1.0688 - val_acc: 0.6234\n",
      "Epoch 4/30\n",
      "12/12 [==============================] - 2s 183ms/step - loss: 0.9730 - acc: 0.6845 - val_loss: 1.2786 - val_acc: 0.5877\n",
      "Epoch 5/30\n",
      "12/12 [==============================] - 2s 187ms/step - loss: 1.1178 - acc: 0.6452 - val_loss: 1.0347 - val_acc: 0.6429\n",
      "Epoch 6/30\n",
      "12/12 [==============================] - 3s 216ms/step - loss: 0.9667 - acc: 0.7066 - val_loss: 1.0844 - val_acc: 0.6396\n",
      "Epoch 7/30\n",
      "12/12 [==============================] - 3s 212ms/step - loss: 0.9521 - acc: 0.6953 - val_loss: 1.0451 - val_acc: 0.6656\n",
      "Epoch 8/30\n",
      "12/12 [==============================] - 2s 194ms/step - loss: 1.0177 - acc: 0.6782 - val_loss: 1.0742 - val_acc: 0.6656\n",
      "Epoch 9/30\n",
      "12/12 [==============================] - 3s 209ms/step - loss: 1.0203 - acc: 0.6430 - val_loss: 1.0119 - val_acc: 0.6818\n",
      "Epoch 10/30\n",
      "12/12 [==============================] - 2s 208ms/step - loss: 0.9229 - acc: 0.7133 - val_loss: 1.0331 - val_acc: 0.6948\n",
      "Epoch 11/30\n",
      "12/12 [==============================] - 2s 192ms/step - loss: 0.9233 - acc: 0.7275 - val_loss: 1.0586 - val_acc: 0.6039\n",
      "Epoch 12/30\n",
      "12/12 [==============================] - 2s 187ms/step - loss: 0.9765 - acc: 0.6976 - val_loss: 0.9800 - val_acc: 0.6851\n",
      "Epoch 13/30\n",
      "12/12 [==============================] - 2s 205ms/step - loss: 0.8509 - acc: 0.7605 - val_loss: 0.8836 - val_acc: 0.7532\n",
      "Epoch 14/30\n",
      "12/12 [==============================] - 2s 195ms/step - loss: 0.7801 - acc: 0.7422 - val_loss: 0.9824 - val_acc: 0.6591\n",
      "Epoch 15/30\n",
      "12/12 [==============================] - 2s 196ms/step - loss: 0.7863 - acc: 0.7710 - val_loss: 0.9167 - val_acc: 0.6753\n",
      "Epoch 16/30\n",
      "12/12 [==============================] - 3s 212ms/step - loss: 0.8947 - acc: 0.7306 - val_loss: 0.8800 - val_acc: 0.7143\n",
      "Epoch 17/30\n",
      "12/12 [==============================] - 2s 202ms/step - loss: 0.8348 - acc: 0.7290 - val_loss: 0.8749 - val_acc: 0.7240\n",
      "Epoch 18/30\n",
      "12/12 [==============================] - 2s 178ms/step - loss: 0.7315 - acc: 0.7358 - val_loss: 0.8972 - val_acc: 0.6558\n",
      "Epoch 19/30\n",
      "12/12 [==============================] - 2s 204ms/step - loss: 0.7485 - acc: 0.7526 - val_loss: 0.7947 - val_acc: 0.7435\n",
      "Epoch 20/30\n",
      "12/12 [==============================] - 2s 202ms/step - loss: 0.6622 - acc: 0.7945 - val_loss: 0.8099 - val_acc: 0.7338\n",
      "Epoch 21/30\n",
      "12/12 [==============================] - 3s 212ms/step - loss: 0.7161 - acc: 0.7812 - val_loss: 0.8419 - val_acc: 0.7532\n",
      "Epoch 22/30\n",
      "12/12 [==============================] - 2s 190ms/step - loss: 0.7182 - acc: 0.7803 - val_loss: 0.7767 - val_acc: 0.7792\n",
      "Epoch 23/30\n",
      "12/12 [==============================] - 2s 193ms/step - loss: 0.6044 - acc: 0.8376 - val_loss: 0.8427 - val_acc: 0.7403\n",
      "Epoch 24/30\n",
      "12/12 [==============================] - 2s 189ms/step - loss: 0.6935 - acc: 0.7893 - val_loss: 0.8328 - val_acc: 0.7240\n",
      "Epoch 25/30\n",
      "12/12 [==============================] - 2s 199ms/step - loss: 0.7156 - acc: 0.7631 - val_loss: 0.7779 - val_acc: 0.7662\n",
      "Epoch 26/30\n",
      "12/12 [==============================] - 2s 190ms/step - loss: 0.6469 - acc: 0.8376 - val_loss: 0.8074 - val_acc: 0.7597\n",
      "Epoch 27/30\n",
      "12/12 [==============================] - 3s 209ms/step - loss: 0.6298 - acc: 0.8218 - val_loss: 0.7744 - val_acc: 0.7662\n",
      "Epoch 28/30\n",
      "12/12 [==============================] - 3s 208ms/step - loss: 0.6262 - acc: 0.7891 - val_loss: 0.8252 - val_acc: 0.7500\n",
      "Epoch 29/30\n",
      "12/12 [==============================] - 2s 189ms/step - loss: 0.5856 - acc: 0.8312 - val_loss: 0.7603 - val_acc: 0.7792\n",
      "Epoch 30/30\n",
      "12/12 [==============================] - 2s 202ms/step - loss: 0.6504 - acc: 0.8129 - val_loss: 0.6870 - val_acc: 0.8247\n"
     ]
    }
   ],
   "source": [
    "history=classifier.fit_generator(training_set,\n",
    "                         steps_per_epoch =12,\n",
    "                         epochs = 30,\n",
    "                         validation_data = test_set,\n",
    "                         validation_steps = 10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.plot(history.history['acc'])\n",
    "plt.plot(history.history['val_acc'])\n",
    "plt.title('Model Accuracy')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "plt.legend(['tarin','test'],loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])\n",
    "plt.title('Model Loss')\n",
    "plt.ylabel('Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.legend(['tarin','test'],loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow\n",
    "from tensorflow.keras.preprocessing import image\n",
    "import matplotlib.pyplot as plt\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from keras.preprocessing import image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_image=image.load_img('dataset/single_pred/m_or_f.jpg',target_size=(64,64))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_image=image.img_to_array(test_image)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_image=np.expand_dims(test_image,axis=0)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.]],\n",
       "      dtype=float32)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result=classifier.predict(test_image)\n",
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'female_15-20': 0,\n",
       " 'female_25-32': 1,\n",
       " 'female_33-43': 2,\n",
       " 'female_44-53': 3,\n",
       " 'female_54-64': 4,\n",
       " 'female_65-100': 5,\n",
       " 'female_8-14': 6,\n",
       " 'male_15-20': 7,\n",
       " 'male_25-32': 8,\n",
       " 'male_33-44': 9,\n",
       " 'male_45-53': 10,\n",
       " 'male_54-64': 11,\n",
       " 'male_65-100': 12,\n",
       " 'male_8-14': 13}"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "labels=training_set.class_indices  \n",
    "labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "if result[0][0]==1:\n",
    "    prediction='female 8-14'\n",
    "elif result[0][1]==1:\n",
    "    prediction='female 15-20'\n",
    "elif result[0][2]==1:\n",
    "    prediction='female 25-33'\n",
    "elif result[0][3]==1:\n",
    "    prediction='female 34-44'\n",
    "elif result[0][4]==1:\n",
    "    prediction='female 45-53'\n",
    "elif result[0][5]==1:\n",
    "    prediction='female 54-64'\n",
    "elif result[0][6]==1:\n",
    "    prediction='female 65-100 '\n",
    "elif result[0][7]==1:\n",
    "    prediction='male 15-20'\n",
    "elif result[0][8]==1:\n",
    "    prediction='male 25-33'\n",
    "elif result[0][9]==1:\n",
    "    prediction='male 34-43'\n",
    "elif result[0][10]==1:\n",
    "    prediction='male 44-54'\n",
    "elif result[0][11]==1:\n",
    "    prediction='male 54-64'\n",
    "elif result[0][12]==1:\n",
    "    prediction='male 65-100'\n",
    "elif result[0][13]==1:\n",
    "    prediction='male 8-14'\n",
    "else:\n",
    "    print(\"Can't predict\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'male 8-14'"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
